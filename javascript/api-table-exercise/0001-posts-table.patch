From 561179c84383c4e7fc67d663a9cdf9f9eb14de6d Mon Sep 17 00:00:00 2001
From: adrianmq <mateiadrian25@gmail.com>
Date: Mon, 26 Aug 2019 11:21:31 +0300
Subject: [PATCH] posts table

---
 src/App.js            | 84 +++++++++++++++++++++++++++++++++++++++++++++------
 src/actions/index.js  | 14 +++++++++
 src/reducers/index.js | 35 +++++++++++++++++++--
 src/store/index.js    |  9 ++++++
 4 files changed, 131 insertions(+), 11 deletions(-)
 create mode 100644 src/actions/index.js
 create mode 100644 src/store/index.js

diff --git a/src/App.js b/src/App.js
index 0cbf53c..6370c81 100644
--- a/src/App.js
+++ b/src/App.js
@@ -1,16 +1,82 @@
-import React from 'react';
+import React, { Component } from 'react';
+import { Provider } from 'react-redux';
 import { connect } from 'react-redux';
+import makeStore from './store';
+import { fetchPosts, fetchUsers, fetchComments } from './actions';
+import { log } from 'util';
 
-function App() {
-  return (
-    <div className="app">
-      Render posts as a table here
-    </div>
-  );
+let store = makeStore();
+
+class App extends Component {
+  componentDidMount() {
+    this.props.getPosts()
+  }
+
+  render() {
+    return (
+      <Provider store={store}>
+        <div className="app">
+          <table>
+            <thead>
+              <tr>
+                <td>Title</td>
+                <td>Body</td>
+                <td>User</td>
+                <td>Comments</td>
+              </tr>
+            </thead>
+            <tbody>
+            {
+              this.props.posts
+                ? Object.values(this.props.posts).map((post, i) => {
+                  return (
+                      <tr key={post.id}>
+                        <td>{post.title}</td>
+                        <td>{post.body}</td>
+                        <td>{
+                          post.userId in this.props.users
+                            ? this.props.users[post.userId]['name']
+                            : '-'
+                        }</td>
+                        <td>{
+                          post.id in this.props.commentsByPostId
+                            ? Object.keys(this.props.commentsByPostId[post.id]).length
+                            : 0
+                        }</td>
+                      </tr>
+                  )
+                })
+                : (null)
+            }
+            </tbody>
+          </table>
+        </div>
+      </Provider>
+    );
+  }
 }
 
-const mapStateToProps = state => state
+const mapStateToProps = state => ({
+  posts: state['api']['posts'],
+  commentsByPostId: state['api']['commentsByPostId'],
+  users: state['api']['users']
+})
+
+const mapDispatchToProps = (dispatch) => ({
+  getPosts: () => {
+    return fetch('https://jsonplaceholder.typicode.com/posts')
+      .then(response => response.json())
+      .then(json => dispatch(fetchPosts(json)))
+      .then(json => {
+        fetch('https://jsonplaceholder.typicode.com/users')
+          .then(response => response.json())
+          .then(json => dispatch(fetchUsers(json)))
 
-const mapDispatchToProps = dispatch => ({});
+        fetch('https://jsonplaceholder.typicode.com/comments')
+          .then(response => response.json())
+          .then(json => dispatch(fetchComments(json)))
+      })
+  }
+});
 
 export default connect(mapStateToProps, mapDispatchToProps)(App);
diff --git a/src/actions/index.js b/src/actions/index.js
new file mode 100644
index 0000000..1ff3021
--- /dev/null
+++ b/src/actions/index.js
@@ -0,0 +1,14 @@
+const FETCH_POSTS = 'FETCH_POSTS'
+export function fetchPosts(data) {
+  return { type: FETCH_POSTS, data }
+}
+
+const FETCH_USERS = 'FETCH_USERS'
+export function fetchUsers(data) {
+  return { type: FETCH_USERS, data }
+}
+  
+const FETCH_COMMENTS = 'FETCH_COMMENTS'
+export function fetchComments(data) {
+  return { type: FETCH_COMMENTS, data }
+}
diff --git a/src/reducers/index.js b/src/reducers/index.js
index 8594cd0..a296804 100644
--- a/src/reducers/index.js
+++ b/src/reducers/index.js
@@ -1,13 +1,44 @@
 import { combineReducers } from 'redux';
 
-const exampleReducer = (state = null, action) => {
+const apiInitialState = {
+  posts: {},
+  users: {},
+  commentsByPostId: {}
+}
+
+const apiReducer = (state = apiInitialState, action) => {
   switch (action.type) {
+    case 'FETCH_POSTS':
+      let posts = action.data.reduce((postsById, post) => {
+        postsById[post['id']] = post
+        return postsById
+      }, {})
+      return { ...state, posts }
+    case 'FETCH_USERS':
+      let users = action.data.reduce((usersById, user) => {
+        usersById[user['id']] = user
+        return usersById
+      }, {})
+      return { ...state, users }
+    case 'FETCH_COMMENTS':
+      let commentsByPostId = action.data.reduce((commentsByPostId, comment) => {
+        if (comment['postId'] in commentsByPostId) {
+          commentsByPostId[comment['postId']].push(comment)
+        } else {
+          commentsByPostId[comment['postId']] = [comment]
+        }
+        return commentsByPostId
+      }, {})
+      return {
+        ...state,
+        commentsByPostId
+      }
     default:
       return state;
   }
 }
 
 export default combineReducers({
-  exampleReducer
+  api: apiReducer
 })
   
\ No newline at end of file
diff --git a/src/store/index.js b/src/store/index.js
new file mode 100644
index 0000000..56e05ea
--- /dev/null
+++ b/src/store/index.js
@@ -0,0 +1,9 @@
+import { createStore, applyMiddleware } from 'redux';
+import thunk from 'redux-thunk';
+import reducer from '../reducers';
+
+const makeStore = () => {
+    return createStore(reducer, {}, applyMiddleware(thunk));
+}
+
+export default makeStore;
\ No newline at end of file
-- 
2.9.0.windows.1

